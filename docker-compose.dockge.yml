# docker-compose.dockge.yml
# Optimized for Dockge/TrueNAS/Portainer users
# 
# QUICK START:
# 1. Update DISCORD_TOKEN with your bot token
# 2. Update the volume path for your system (see IMPORTANT note below)
# 3. Deploy!

version: '3.8'

services:
  robobetbot:
    # Auto-clone from GitHub and run
    image: node:18-alpine
    container_name: robobetbot
    restart: unless-stopped
    
    environment:
      # REQUIRED: Change this to your Discord bot token!
      DISCORD_TOKEN: "PASTE_YOUR_TOKEN_HERE"
      
      # Optional: Change these if needed
      TZ: "America/New_York"  # Your timezone
      DATABASE_PATH: "/data/bets.db"
      
      # Auto-clone from GitHub (uses public repo)
      GITHUB_REPO: "https://github.com/yzRobo/RoboBetBot.git"
      
    volumes:
      # IMPORTANT: Update this path for your system!
      # The database will be stored at this location.
      # 
      # Examples for different systems:
      # - TrueNAS: /mnt/YourPool/YourDataset:/data
      # - Synology: /volume1/docker/robobetbot:/data  
      # - QNAP: /share/Container/robobetbot:/data
      # - Unraid: /mnt/user/appdata/robobetbot:/data
      # - Generic Docker: ./data:/data (relative path, stores in Dockge directory)
      #
      # Current setting (change this to your path):
      - ./data:/data
      
      # App code (auto-downloaded) - usually don't need to change this
      - ./app:/app
    
    working_dir: /app
    
    # This command handles everything automatically
    command: >
      sh -c "
        if [ ! -f /app/bot.js ]; then
          echo '===================================' &&
          echo 'First run - setting up RoboBetBot' &&
          echo '===================================' &&
          apk add --no-cache git &&
          git clone $$GITHUB_REPO /app &&
          echo 'Installing dependencies...' &&
          npm install --production &&
          echo '===================================' &&
          echo 'Setup complete! Starting bot...' &&
          echo '==================================='
        fi &&
        echo 'Starting RoboBetBot...' &&
        node bot.js
      "
    
    # Health monitoring
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits (optional - adjust as needed)
    # Increase these if bot seems slow or crashes
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

# Network configuration
networks:
  default:
    name: robobetbot-network
    driver: bridge

# Named volumes (only used if you keep ./data instead of absolute path)
volumes:
  bot-data:
    name: robobetbot-data
  bot-app:
    name: robobetbot-app